Lab â€“ Troubleshoot the Development Environment



Bob needs your help to get his app ready in time for the client presentation!


His app is working perfectly on his own laptop, but while transferring the code to the Dev servers, things are not working as expected!

Wherever required, use sudo to run commands as the root user. Bob's password is caleston123.

Proceed to the next question to see the application architecture.


Here is the simple architecture diagram of the implementation. This is a two-tier application. 

  - The web server is hosted on devapp01.

  - The DB server is hosted on devdb01

Bob has done his bit when it comes to the code. Everything is set up to work properly. 

All you need to do is to fix some of the things he has missed while migrating the code and the database on the DEV servers.


Click on OK to move to the first task.



Task 1: 

Copy the file caleston-code.tar.gz from Bob's laptop to Bob's home directory on the webserver devapp01

Bob's password is caleston123


S Task 1: 
Run the pwd and ls commands to check the current path and to list the files and directories as follows:
  bob@caleston-lp10:~$ pwd
  /home/bob
  bob@caleston-lp10:~$ 
  bob@caleston-lp10:~$ ls
  caleston-code.tar.gz  media

Use the scp command to transfer the files to the remote server as follows: 

  bob@caleston-lp10:~$ scp caleston-code.tar.gz bob@devapp01:~/

It will ask for the password. So copy the password from the question description and paste it.


Task 2: 

On the devapp01 webserver, unzip and extract the copied file in the directory /opt/.

The password for the devapp01 webserver is caleston123.

S Task 2: 

  bob@caleston-lp10:~$ ssh devapp01 

  bob@devapp01:~$ sudo tar -C /opt/ -xvf caleston-code.tar.gz

Task 3: 

Delete the tar file from devapp01 webserver.

S Task 3:

bob@devapp01:~$ pwd

/home/bob

bob@devapp01:~$ rm -rf caleston-code.tar.gz


Task 4: 

Make sure that the directory is extracted in such a way that the path /opt/caleston-code/mercuryProject/ exists on the webserver.

S Task 4: 

bob@devapp01:~$ ls /opt/caleston-code/mercuryProject/

admin.json  blog  db.json  manage.py  media  mercury  portfolios  templates


For the client demo, Bob has installed a postgres database in devdb01.
SSH to the database devdb01 and check the status of the postgresql.service

What is the state of the DB?

Bob's password is caleston123


S: 

Make use of the ssh command to log in to the remote server: -
bob@devapp01:~$ ssh devdb01
It will ask for the password, type the caleston123

Check the status of the postgresql service: -
bob@devdb01:~$ sudo systemctl status postgresql

  ==>>   Active: inactive (dead) 

Task 5: 

Add an entry host all all 0.0.0.0/0 md5 to the end of the file /etc/postgresql/10/main/pg_hba.conf on the DB server.

This will allow the web application to connect to the DB.

S Task 5: 

Run the below commands: -
bob@devdb01:~$ sudo vi /etc/postgresql/10/main/pg_hba.conf 
After adding a line at the end of the file. Press ESC and use :wq. 

:wq - It will save your changes and exit out from the editor.


Task 6: 

Start the postgres DB on the devdb01 server.

S Task 6: 

Run the following command to start the service:
sudo systemctl start postgresql


After starting the service, check the status: -
sudo systemctl status postgresql

Q:    
What port is postgres running on? Check using the netstat command?

Bob's password is caleston123.

S: Run below command:
sudo netstat -natulp | grep postgres | grep LISTEN
You should see the postgres service listening on PORT 5432


Task 7: 

Back on the devapp01 webserver. Attempt to start the web application by:
Navigate to the directory /opt/caleston-code/mercuryProject
Next, run the command python3 manage.py runserver 0.0.0.0:8000

Was the command successful? Did the application load up?
Key in Control + C to get back to the bash prompt.


S Task 7: 

If you are in the DB server then type exit or logout or make use of the ssh command.
ssh devapp01
and then run the cd command with the given path.

bob@devapp01:~$ cd /opt/caleston-code/mercuryProject/

bob@devapp01:/opt/caleston-code/mercuryProject$ pwd

/opt/caleston-code/mercuryProject

and run the command: - python3 manage.py runserver 0.0.0.0:8000


Task 8: 
It appears that Bob did not configure his app to connect a postgres database running on a different server. 

That explains why things are working on his laptop and not in the DEV servers. 

It also appears that he is using the wrong port for postgres!
Find the file in the directory under /opt/caleston-code that has a string matching DATABASES = {. 
Replace the value of localhost to devdb01
In the same file fix the postgres port to match the port being used on devdb01


S: Run the below command:
  grep -ir "DATABASES = {" /opt/caleston-code/
  
/opt/caleston-code/mercuryProject/mercury/settings.py:DATABASES = {

It showed that the database settings stored in this file: /opt/caleston-code/mercuryProject/mercury/settings.py 

Use vim editor to update the database settings at below:

sudo vi /opt/caleston-code/mercuryProject/mercury/settings.py, if password is required, enter caleston123.


Task 9: 

Now that has been set up, change the ownership of ALL files and directories under /opt/caleston-code to user mercury.

Bob's password is caleston123.

S: Run the command: - sudo chown -R mercury /opt/caleston-code to recursively change ownership of files.




Great! Everything should now be in order to restart the application. 

On the devapp01 server start the webserver again by running the command:

Navigate to the directory /opt/caleston-code/mercuryProject
Next, run the command python3 manage.py runserver 0.0.0.0:8000

Note:- Make sure to activate the virtual environment using source ../venv/bin/activate within the current project before executing python3 manage.py migrate.

Something like (venv) should now be a part of the prompt.
To access the application, click on the Project Mercury tab!


S: Activate our virtual environment with the source command 

    cd /opt/caleston-code
    
    source venv/bin/activate 

Apply database migrations: 

    cd /opt/caleston-code/mercuryProject

    python3 manage.py migrate

Start the application

    python3 manage.py runserver 0.0.0.0:8000


Well done! Now, for the final task before the client presentation. 

Create a new service called mercury.service with the following requirements.
Service name: - mercury.service, WorkingDirectory: - /opt/caleston-code/mercuryProject/, Command to run: /usr/bin/python3 manage.py runserver 0.0.0.0:8000.
Restart on failure and enable for multi-user.target.
Run as user mercury.
Set description: Project Mercury Web Application.

Create the unit file under /etc/systemd/system. Once done, enable and start the mercury.service.


S: 

The service file should look like this:

[Unit]

Description=Project Mercury Web Application

[Service]

ExecStart=/usr/bin/python3 manage.py runserver 0.0.0.0:8000

Restart=on-failure

WorkingDirectory=/opt/caleston-code/mercuryProject

User=mercury

[Install]

WantedBy=multi-user.target

Use the vi editor: -

sudo vi /etc/systemd/system/mercury.service


Insert the data.


Start and enable the service and check the status as follows: -

sudo systemctl enable --now mercury.service

sudo systemctl status mercury.service













